#!/usr/bin/env perl
#
# List or plot module dependencies - gene+github@ology.net
#
use strict;
use warnings;

use Capture::Tiny ':all';
use Data::Dumper;
use File::Find;
#use GraphViz; # TODO require this instead of use
use GraphViz::Data::Structure; # "
use Module::CoreList;

# Get the directory under which to look.
my $dir  = shift
    || die "Usage: perl $0 path/to/lib [path] [core] [lc] [dump] [img]\n";
# Should we use full pathnames?
my $path = shift || 0;
# Should we include core modules?
my $core = shift || 0;
# Should we include all-lowercase packages?
my $lc   = shift || 0;
# Should we dump the dependencies?
my $dump = shift || 0;
# Should we generate an image?
my $img  = shift || 0;

# Recursively locate all the deps.
my $deps = {};
my $seen = {};
find(\&wanted, $dir);

if ($dump) {
    warn Data::Dumper->new([$deps])->Indent(1)->Terse(1)->Quotekeys(0)->Sortkeys(1)->Dump;
}

if ($img) {
    # Make a graphviz instance.
    my $g = GraphViz::Data::Structure->new($deps);
    print $g->graph()->as_png;
# OR THIS MAYBE:
#    my $g = GraphViz->new();
#    for my $module (keys %$deps) {
#        for my $dep (@{ $deps->{$module} }) {
#            $g->add_edge($module => $dep);
#        }
#    }
#    print $g->as_png;
}

sub wanted { /\.pm$/ && deps($path ? $File::Find::name : $_) }

sub deps {
    # The module to investigate.
    my $module = shift || die "ERROR: No file provided.";

    # Find the file dependencies.
    my ($out, $err, $exit) = capture {
        system('perl', '-MDevel::Dependencies', $module);
    };

    # Remove the header.
    $out =~ s/Devel::Dependencies finds \d+ dependencies://;

    # Replace file with module syntax.
    my $to_module = sub {
        my $package = shift;
        $package =~ s/\//::/g;
        $package =~ s/\.pm//;
        return $package;
    };

    # Replace file with module syntax.
    $module = $to_module->($module) unless $path;

    # Select all the dependencies individually.
    my @deps = split /\s+/, $out;

    # Remove modules in core.
    for my $d (@deps) {
        # Replace file with module syntax.
        my $m = $to_module->($d);

        # Change the dependent package name to its module equivalent.
        $d = $m unless $path;

        # Save or skip the module.
        if ($seen->{$d}
            || (!$core && Module::CoreList::is_core($m))
            || (!$lc && $d !~ /[A-Z]/)
        ) {
            $seen->{$d}++;
        }
        else {
            push @{ $deps->{$module} }, $d;
        }
    }
}

