#!/usr/bin/env perl
use strict;
use warnings;

# Usage: perl halstead-metrics Include,Foo [Exclude,Bar,Baz]

use lib '/Users/gene/sandbox/Perl-Metrics-Halstead/lib';
use Perl::Metrics::Halstead;
use ExtUtils::Installed;
use List::Util qw/any/;
use Syntax::Keyword::Try;
use Text::CSV_XS qw/csv/;

my $include = shift // 'Music';
my $exclude = shift // '';

$include = [ split /,/, $include ];
$exclude = [ split /,/, $exclude ];

my $inst = ExtUtils::Installed->new();

my @modules = $inst->modules();

# Collect the included module program files.
my %modules;
for my $module ( @modules ) {
    next unless any { $module =~ /$_/ } @$include;
    next if any { $module =~ /$_/ } @$exclude;
    my @files = $inst->files( $module, 'prog' );
    $modules{$module} = \@files;
}

my $i = 0;

# Collect the Halstead metrics for the module files.
my %by_file;
for my $module ( keys %modules ) {
    for my $file ( @{ $modules{$module} } ) {
        next unless $file =~ /\.pm$/;

        try {
            Perl::Metrics::Halstead->new( file => $file );
        }
        catch {
            warn "$module $file can't be computed: $@\n";
            next;
        };

        $i++;
        print "$i. Processing $module $file...\n";
        my $pmh = Perl::Metrics::Halstead->new( file => $file );

        # Convert the filename to a module.
        $file =~ s/^.*?\/[\d.]+\///;  # Remove the starting path bits to a perl version number.
        $file =~ s/\//::/g;
        $file =~ s/\.pm$//;

        $by_file{$file} = $pmh->dump if defined $pmh;
    }
}

# Build the data rows of the metrics and the module name.
my @rows;
for my $file ( keys %by_file ) {
    my $row = [];
    push @rows, [ sort( keys %{ $by_file{$file} } ), 'module' ]
        unless @rows;
    for my $metric ( sort keys %{ $by_file{$file} } ) {
        push @$row, $by_file{$file}->{$metric};
    }
    push @$row, $file;
    push @rows, $row;
}

# Create a CSV file of the data.
my $filename = "$0.csv";
my $csv = Text::CSV_XS->new({ binary => 1, auto_diag => 1 });
open my $fh, '>:encoding(utf8)', $filename or die "Can't write $filename: $!";
$csv->say( $fh, $_ ) for @rows;
close $fh or die "Can't close $filename: $!";

__END__
R>
x = read.csv('halstead-metrics.csv', header=T)
plot(sort(x$effort), main='Halstead Complexity')
text(sort(x$effort), labels=x$module, cex=0.5, pos=2, col='blue')
x$module[which(x$effort == max(x$effort))]
plot(sort(x$difficulty))
text(sort(x$difficulty), labels=x$module, cex=0.5, pos=2, col='blue')
x$module[which(x$difficulty == max(x$difficulty))]
plot(x$effort, x$difficulty, xlab='Effort', ylab='Difficulty', main='Halstead Complexity', cex=0.5)
text(x$effort, x$difficulty, x$module, cex=0.5, pos=4, col='blue')
