#!/usr/bin/env perl
use strict;
use warnings;

# Search CPAN distributions
#
# Examples (case insensitive):
# $ perl parse-cpan --or Math
# $ perl parse-cpan --or Math --fresh
# $ perl parse-cpan --or Music,MIDI
# $ perl parse-cpan --or \\bAI\\b  # Regular expression matching
# $ perl parse-cpan --id \\bGENE\\b
# $ perl parse-cpan --or Math --and Geo
# $ perl parse-cpan --or Math --and geo,planar
# $ perl parse-cpan --or Music --id gene
# $ perl parse-cpan --start 2022-01-01 # Newer than
# $ perl parse-cpan --end 1999-12-31   # Older than
# $ perl parse-cpan --start 2021-01-01 --end 2021-12-31 # Range

use Getopt::Long                qw(GetOptions);
use HTTP::Simple                qw(getstore);
use List::Util                  qw(all any);
use MetaCPAN::Client            ();
use Number::Format              ();
use Parse::CPAN::Packages::Fast ();

STDOUT->autoflush;

die "No arguments given. Halting.\n" unless @ARGV;

my %opts = (
    or    => '',
    and   => '',
    id    => '',
    start => '',
    end   => '',
    favs  => 0,
    fresh => 0,
);
GetOptions(\%opts,
    'or=s',
    'and=s',
    'id=s',
    'start=s',
    'end=s',
    'favs',
    'fresh!',
) or die("Error in command line arguments\n");

my $base = 'https://www.cpan.org/modules/';
my $file = '02packages.details.txt.gz';

if ($opts{fresh} || !-e $file) {
    print "Getting $file ...\n";
    get_file($base . $file, $file, "Saved $file");
}

$opts{or}  = [ split /,/, $opts{or} ];
$opts{and} = [ split /,/, $opts{and} ];
$opts{id}  = [ split /,/, $opts{id} ];

print "Parsing $file ... ";
my $p = Parse::CPAN::Packages::Fast->new($file);
print "Done.\n";
#print "Removing $file\n";
#unlink $file;

print "Processing...\n";

my $mcpan = MetaCPAN::Client->new;

my %totals;

my $i = 0;

for my $item ($p->distributions) {
    my $name = $item->dist;
    next unless $name;

    my $id = $item->cpanid;

    next if @{ $opts{or} }  && !(any { $name =~ /$_/i } @{ $opts{or} });
    next if @{ $opts{and} } && !(all { $name =~ /$_/i } @{ $opts{and} });
    next if @{ $opts{id} }  && !(any { $id =~ /$_/i }  @{ $opts{id} });

    my $release = eval { $mcpan->release($name) };

    my $size = $release ? $release->stat->{size} : 0;
    my $date = $release ? $release->date         : '?';

    next if $opts{start} && $date lt $opts{start};
    next if $opts{end}   && $date gt $opts{end};

    my $url = "https://metacpan.org/dist/$name";
    my $fav = $mcpan->favorite({ distribution => $name });

    $i++;

    printf "%d. %s %s %s %d %s\n", $i, $url, $item->version, $date, $size, $id;
    printf "\tFavorite count: %d\n", $fav->total if $opts{favs};

    $totals{size} += $size;
    $totals{favs} += $fav->total;
}

my $nf = Number::Format->new;
print 'Total bytes: ', $nf->format_bytes($totals{size}), "\n" if defined $totals{size};
print 'Total favs: ', $nf->format_number($totals{favs}), "\n" if $opts{favs};

sub get_file {
    my ($url, $file, $msg) = @_;

    my $status = getstore($url, $file)
        or die "Can't getstore $url to $file: $!\n";

    die "Could not get $file from $url\n"
        unless $status == 200;

    print "$msg\n";
}
