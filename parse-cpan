#!/usr/bin/env perl
use strict;
use warnings;

# Search CPAN distributions
#
# Example:
# $ perl parse-cpan # Show *every* distro!
# $ perl parse-cpan --or Math
# $ perl parse-cpan --or Music,MIDI
# $ perl parse-cpan --or \\bAI\\b  # Regular expression matching
# $ perl parse-cpan --id \\bGENE\\b
# $ perl parse-cpan --or Math --and Geo
# $ perl parse-cpan --or Math --and Geo,Planar
# $ perl parse-cpan --or Music --id gene
# $ perl parse-cpan --start 2022-01-01 # Newer than
# $ perl parse-cpan --end 1999-12-31   # Older than
# $ perl parse-cpan --start 2021-01-01 --end 2021-12-31 # Range

use Getopt::Long;
use HTTP::Simple qw(getstore);
use List::Util qw(all any);
use MetaCPAN::Client;
use Parse::CPAN::Packages::Fast;
use MetaCPAN::Helper;

STDOUT->autoflush;

my %opts = (
    or    => '',
    and   => '',
    id    => '',
    start => '',
    end   => '',
    favs  => 0,
);
GetOptions(\%opts,
    'or=s',
    'and=s',
    'id=s',
    'start=s',
    'end=s',
    'favs',
) or die("Error in command line arguments\n");

my $base = 'https://www.cpan.org/modules/';
my $file = '02packages.details.txt.gz';

print "Getting $file ...\n";
get_file($base . $file, $file, "Saved $file");

$opts{or}  = [ split /,/, $opts{or} ];
$opts{and} = [ split /,/, $opts{and} ];
$opts{id}  = [ split /,/, $opts{id} ];

print "Parsing $file ... ";
my $p = Parse::CPAN::Packages::Fast->new($file);
print "Done.\n";

unlink $file;

print "Processing...\n";

my $mcpan  = MetaCPAN::Client->new;
my $helper = MetaCPAN::Helper->new;

my $i = 0;

for my $item ($p->distributions) {
    my $name = $item->dist;
    my $id = $item->cpanid;
    next unless $name;
    next if @{ $opts{or} } && !(any { $name =~ /$_/ } @{ $opts{or} });
    next if @{ $opts{and} } && !(all { $name =~ /$_/ } @{ $opts{and} });
    next if @{ $opts{id} } && !(any { $id =~ /$_/i } @{ $opts{id} });
    my $release = eval { $mcpan->release($name) };
    my $date = eval { $release->date } || '?';
    next if $opts{start} && $date lt $opts{start};
    next if $opts{end} && $date gt $opts{end};
    $i++;
    my $url = "https://metacpan.org/dist/$name";
    printf "%d. %s %s %s %s\n", $i, $url, $item->version, $date, $id;
    printf "\tFavorite count: %d\n", $helper->dist2favorite_count($name)
        if $opts{favs};
}

sub get_file {
    my ($url, $file, $msg) = @_;
    my $status = getstore($url, $file)
        or die "Can't getstore $url to $file: $!\n";
    if ($status == 200) {
        print "$msg\n";
    }
    else {
        die "Could not get $file from $url\n";
    }
}
