#!/usr/bin/env perl
use strict;
use warnings;

use Date::Manip;
use HTTP::Simple;
use List::Util 'any';
use Mojo::DOM;

my $include = shift || 'Math';
my $exclude = shift || '';

$include = [ split /,/, $include ];
$exclude = [ split /,/, $exclude ];

# These modules have no space separating the module and the author name
my $longs = qr/(?:ActiveRecord|ConfigReader|DataWarehouse|FormValidator|GoogleIDToken|KeywordsSpider|MetasploitExpress|NexposeSimpleXML|ProjectBuilder|RandomJungle|ReleaseAction|\w+)/;

my $url = 'https://www.cpan.org/modules/01modules.index.html';
my $content = get $url;
print "Fetched $url\n";

my $dom = Mojo::DOM->new($content);
my @lines = split /\n/, $dom->at('pre')->all_text;

my @matches;

for my $line ( @lines ) {
    next unless any { $line =~ /$_/ } @$include;
    next if any { $line =~ /$_/ } @$exclude;

    #                      module,    author,    dist,   size,        uploaded
    my @parts = $line =~ /^($longs)\s*([A-Z]+)\s+(\S+)\s+([\d.]+\w)\s+(.*?)\s*\+?\s*$/;
    next unless $parts[0];

    my $date = ParseDate( $parts[4] );
    $date =~ s/00:00:00//;
    push @matches, [ @parts, $date ];
}

my $i = 0;
for my $match ( sort { $a->[5] cmp $b->[5] || $a->[2] cmp $b->[2] } @matches ) {
    $i++;
    my ($module, $version) = to_module($match->[2]);
    if ($module && $version) {
        printf "%*d. %s %s (%s) on %s by %s\n",
            length(scalar(@matches)), $i,
            $module, $version,
            $match->[3], $match->[4], $match->[1];
    }
    else {
        printf "%*d. %s\n",
            length(scalar(@matches)), $i,
            join(', ', @$match);
    }
}

sub to_module {
    my ($dist) = @_;
    my ($module, $version);
    if ($dist =~ /^(.*?)-([abv\d.]+)\.(?:tar\.gz|tgz|zip)$/) {
        $module  = $1;
        $version = $2;
        $module =~ s/-/::/g;
    }
    return $module, $version;
}
