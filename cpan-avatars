#!/usr/bin/env perl
use strict;
use warnings;

=head1 SYNOPSIS

Construct a collage of CPAN author gravatars.

Writeup: L<https://ology.github.io/2022/01/09/an-image-collage-of-cpan-authors/>

  # Examples:
  perl cpan-avatars 10      # A 10x10 collage starting at author 0
  perl cpan-avatars 2 100   # A 2x2 collage starting at author 100
  perl cpan-avatars 3 gene  # A 3x3 collage starting at author GENE
  perl cpan-avatars 4 -1 /Users/you/avatars # A 4x4 collage of random authors

* If you CTRL-C out of a run, you will have to manually clean-up the
avatars directory.

=cut

use HTTP::Simple qw(get getstore);
use Imager;
use List::SomeUtils 'first_index';
use List::Util 'shuffle';
use Mojo::DOM;
use Mojo::File;
use Parse::CPAN::Authors;

my $side  = shift || 3; # Number of images per side of the collage
my $start = shift // 0; # Where to begin the collage - index number or author name
my $path  = shift || $ENV{HOME} . '/tmp/avatars/'; # Where avatars and the collage live

my $width = 130;            # Fixed avatar side pixel size
my $size  = $width * $side; # The width of the collage
my $max   = $side * $side;  # Number of avatars to fetch
my $field = length $max;    # The field width for printing the increment

my $base = 'https://metacpan.org/author/';
my $cpan = 'http://www.cpan.org/authors/';
my $file = '01mailrc.txt.gz';

my %authors;

# Make a new path if one doesn't exist
$path = Mojo::File->new($path);
unless (-d $path) {
    $path->make_path;
    print "Created new path: $path\n";
}

# Save the cpan authors file
get_file($cpan . $file, $file, "Saved $file");

my $pca = Parse::CPAN::Authors->new($file);

# Get each author metacpan url
for my $author ($pca->authors) {
    $authors{ $author->pauseid } = $base . $author->pauseid;
}

# Remove the cpan author file
unlink $file;

# Find the index of the given author name
if ($start ne '-1' && $start =~ /[A-Za-z]/) {
    my $author = $start;
    $start = first_index { CORE::fc($_) eq CORE::fc($start) } sort keys %authors;
    die "Author '$author' not found\n"
        if $start < 0;
}

my $i = 0;

my @displayed; # Bucket for the displayed authors

# Fetch the author avatar images
for my $author ($start == -1 ? shuffle keys %authors : sort keys %authors) {
    $i++;

    # Skip if not random and the count is below the first id
    next if $start > -1 && ($i - 1) < $start;

    sleep 4 if @displayed; # play nice

    my $content = get($authors{$author});
    my $dom = Mojo::DOM->new($content);
    my $img = $dom->find('img[alt="Author image"]')->[0]->attr('src');

    my $img_file = $path->child($author);
    get_file($img, $img_file, sprintf('%*d. Saved %s', $field, $i, $img_file));

    push @displayed, $author;

    last if @displayed >= $max;
}

# Build an HTML image map
my $html = <<'HTML';
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
  <title>CPAN Author Collage</title>
</head>
<body>
<img src="collage.jpg" alt="CPAN Author Collage" usemap="#collage">
<map name="collage">
HTML

# Instantiate a blank, square collage image
my $collage = Imager->new(xsize => $size, ysize => $size)
    or die "Can't create image: ", Imager->errstr;

$i = 0; # reset the incrementer
my $x = 0;
my $y = 0;

# Read the author files and paste them onto the collage
for my $author (sort @displayed) {
    my $img_file = $path->child($author);
    next unless -e $img_file;

    my $img = Imager->new;
    $img->read(file => $img_file)
        or die "Can't read $img_file: ", $img->errstr;

    unlink $img_file;

    # Compute the next coordinates
    if ($x >= $side) {
        $x = 0;
        $y++;
    }
    my $x0 = $x * $width;
    my $x1 = $x0 + $width;
    my $y0 = $y * $width;
    my $y1 = $y0 + $width;
#    print "$i: [$x,$y] [$x0,$y0] [$x1,$y1]\n";

    $html .= qq|<area shape="rect" coords="$x0,$y0,$x1,$y1" alt="$author" href="$base$author" title="$author">\n|;

    $collage->paste(left => $x0, top => $y0, img => $img);

    $i++;
    $x++;

    last if $i >= $max;
}

# Save the collage image
$file = $path->child('collage.jpg');
$collage->write(file => $file) or
    die "Can't write to $file: ", $collage->errstr;
print "Saved $file\n";

# Finish the HTML image map
$html .= <<'HTML';
</map>
</body>
</html>
HTML

# Save the collage html
$file = $path->child('collage.html');
$file->spurt($html);
print "Saved $file\n";

sub get_file {
    my ($url, $file, $msg) = @_;
    my $status = getstore($url, $file)
        or die "Can't getstore $url to $file: $!\n";
    if ($status == 200) {
        print "$msg\n";
    }
    else {
        die "Could not get $file from $url\n";
    }
}
