#!/usr/bin/env perl
use strict;
use warnings;

use Acme::CPANAuthors;
use File::Slurper 'write_text';
use HTML::TreeBuilder;
use HTTP::Simple;
use Imager;

my $per_side = shift || 3; # Number of images per side of the collage
my $start    = shift || 1; # Where in the alphabetical order to begin the collage
my $dump     = shift || 0; # Optional flag to dump the author list and exit

my $path  = $ENV{HOME} . '/tmp/avatars/'; # Where our transient avatars and the collage live
my $width = 80; # Avatar side pixel size
my $size  = $width * $per_side; # The width of the collage
my $max   = $per_side ** 2; # Number of avatars to fetch

# Fetch the author modules
my $url = 'https://www.cpan.org/modules/01modules.index.html';
my $content = get $url;
print "Fetched $url\n";

# Parse the content into a tree
my $tree = HTML::TreeBuilder->new;
$tree->parse($content);
$tree->eof;

# Accumulate the text bits as lines
my $text = '';
for my $pre ($tree->look_down(_tag => 'pre')) {
    $text .= $pre->as_text;
}
my @lines = split /\n/, $text;

my %authors = (); # Bucket for the authors and their avatars

# Parse the author module lines
for my $line (@lines) {
    # module, author, distribution, size, uploaded
    my @parts = $line =~ /^(\w+)\s+([A-Z]+)\s+(\S+)\s+(\d+\w)\s+(.*?)\s*\+?\s*$/g;
    next unless $parts[0];
    $authors{ $parts[1] }++;
}

my $i = 0; # Generic loop counter and author index

# Inspect the indices of the authors
if ($dump) {
    for my $author (sort keys %authors) {
        $i++;
        print "$i. $author: $authors{$author}\n";
    }
    exit;
}

# Remove authors that precede the given start
for my $author (sort keys %authors) {
    $i++;
    if ($i < $start) {
        delete $authors{$author};
    }
    else {
        last;
    }
}

my $authors = Acme::CPANAuthors->new;

$i = 0;

# Fetch the author avatars
for my $author (sort keys %authors) {
    $i++;

    $authors{$author} = $authors->avatar_url($author);

    my $file = $path . $author;

    my $status = getstore($authors{$author}, $file)
        or warn "Can't getstore for $file: $!\n";
    if ($status == 200) {
        print "$i. Saved $file\n";
    }
    else {
        print "WARNING: Could not save $file\n";
    }

    sleep 4; # Play nice

    last if $i >= $max;
}

# Build an HTML image map
my $html =<<'HTML';
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
  <title>CPAN Author Collage</title>
</head>
<body>
<img src="collage.jpg" alt="CPAN Author Collage" usemap="#collage">
<map name="collage">
HTML

# Instantiate a blank collage image
my $collage = Imager->new(xsize => $size, ysize => $size)
    or die "Can't create image: ", Imager->errstr;

$i = 0;
my $j = 0; # x coordinate iterator
my $k = 0; # y coordinate iterator

# Read the author files and paste them onto the collage
for my $author (sort keys %authors) {
    my $file = $path . $author;

    my $img = Imager->new;
    $img->read(file => $file)
        or die "Can't read $file: ", $img->errstr;

    if ($j >= $per_side) {
        $j = 0;
        $k++;
    }
    my $x0 = $j * $width;
    my $x1 = $x0 + $width;
    my $y0 = $k * $width;
    my $y1 = $y0 + $width;
#    print "[$i,$j,$k] [$x,$y] [$x1,$y1]\n";

    $html .= qq|<area shape="rect" coords="$x0,$y0,$x1,$y1" alt="$author" href="https://metacpan.org/author/$author">\n|;

    $collage->paste(left => $x0, top => $y0, img => $img);

    unlink $file;

    $i++;
    $j++;

    last if $i >= $max;
}

# Save the collage
my $file = $path . 'collage.jpg';
$collage->write(file => $file) or
    die "Can't write to $file: ", $collage->errstr;
print "Saved $file\n";

# Finish the HTML image map
$html .=<<'HTML';
</map>
</body>
</html>
HTML

$file = $path . 'collage.html';
write_text($file, $html);
print "Saved $file\n";
