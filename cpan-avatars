#!/usr/bin/env perl
use strict;
use warnings;

# Write-up: http://techn.ology.net/making-an-image-map-of-cpan-authors/

# Examples:
# perl cpan-avatars 10      # A 10x10 collage starting at author 1
# perl cpan-avatars 3 1000  # A 3x3 collage starting at author 1000
# perl cpan-avatars 2 gene  # A 2x2 collage starting at author GENE

use File::Copy;
use File::Slurper 'write_text';
use Gravatar::URL;
use HTTP::Simple;
use Image::Compare;
use Imager;
use List::SomeUtils 'first_index';
use Parse::CPAN::Authors;

my $side  = shift || 3; # Number of images per side of the collage
my $start = shift || 1; # Where in the alphabetical order to begin the collage - number or author name

my $path  = $ENV{HOME} . '/tmp/avatars/'; # Where our transient avatars and the collage live
my $width = 80; # Avatar side pixel size
my $size  = $width * $side; # The width of the collage
my $max   = $side ** 2; # Number of avatars to fetch

my $unknown = 'http://www.gravatar.com/avatar/5660261bf7fc03555e8d0f27b09dc6e5';
my $default = $path . 'default.jpg';

die "Path '$path' does not exist"
    unless -d $path;

# Fetch the author modules
my $url = 'http://www.cpan.org/authors/01mailrc.txt.gz';
my $file = $path . '01mailrc.txt.gz';
my $status = getstore($url, $file)
    or die "Can't getstore for $file: $!\n";
if ($status == 200) {
    print "Saved $file\n";
}
else {
    die "Could not get $file\n";
}
print "Fetched $url\n";

my %authors = (); # Bucket for the authors and their avatars

my $p = Parse::CPAN::Authors->new($file);

unlink $file; # Remove the 01mailrc file

# Parse the author module lines
for my $author ($p->authors) {
    $authors{ $author->pauseid } = gravatar_url(email => $author->email);
}

# Find the index of the given author name
if ($start =~ /^[A-Za-z]+$/) {
    $start = first_index { CORE::fc($_) eq CORE::fc($start) } sort keys %authors;
    die "Author not found\n"
        if $start == -1;
    $start++;
}

my $i = 0; # Generic loop counter and author index

# Remove authors that precede the given start
for my $author (sort keys %authors) {
    $i++;
    if ($i < $start) {
        delete $authors{$author};
    }
    else {
        last;
    }
}

die "No authors\n"
    if keys(%authors) < 1;

# Set-up image comparison
my $cmp = Image::Compare->new;
$cmp->set_method(
    method => &Image::Compare::THRESHOLD,
    args   => 25,
);
$cmp->set_image1(img => $default, type => 'jpeg');

$i = 0;

# Fetch the author avatars
for my $author (sort keys %authors) {
    $i++;

    my $file = $path . $author;

    if ($authors{$author} eq $unknown) {
        copy($default, $file);
        print "$i. Copied unknown to $file\n";
    }
    else {
        my $status = getstore($authors{$author}, $file)
            or die "Can't getstore for $file: $!\n";
        if ($status == 200) {
            print "$i. Saved $file\n";
        }
        else {
            die "Could not get $file\n";
        }

        $cmp->set_image2(img => $file);

        if ($cmp->compare) {
            sleep 4; # Play nice

            my $status = getstore($authors{$author} . '?d=identicon', $file)
                or die "Can't getstore for $file: $!\n";
            if ($status == 200) {
                print "\tResaved as identicon\n";
            }
            else {
                die "Could not get $file\n";
            }
        }

        sleep 4; # Play nice
    }

    last if $i >= $max;
}

# Build an HTML image map
my $html =<<'HTML';
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
  <title>CPAN Author Collage</title>
</head>
<body>
<img src="collage.jpg" alt="CPAN Author Collage" usemap="#collage">
<map name="collage">
HTML

# Instantiate a blank, square collage image
my $collage = Imager->new(xsize => $size, ysize => $size)
    or die "Can't create image: ", Imager->errstr;

$i = 0;
my $j = 0; # x coordinate iterator
my $k = 0; # y coordinate iterator

# Read the author files and paste them onto the collage
for my $author (sort keys %authors) {
    my $file = $path . $author;

    my $img = Imager->new;
    $img->read(file => $file)
        or die "Can't read $file: ", $img->errstr;

    if ($j >= $side) {
        $j = 0;
        $k++;
    }
    my $x0 = $j * $width;
    my $x1 = $x0 + $width;
    my $y0 = $k * $width;
    my $y1 = $y0 + $width;
#    print "[$i,$j,$k] [$x0,$y0] [$x1,$y1]\n";

    $html .= qq|<area shape="rect" coords="$x0,$y0,$x1,$y1" alt="$author" href="https://metacpan.org/author/$author">\n|;

    $collage->paste(left => $x0, top => $y0, img => $img);

    unlink $file;

    $i++;
    $j++;

    last if $i >= $max;
}

# Save the collage
$file = $path . 'collage.jpg';
$collage->write(file => $file) or
    die "Can't write to $file: ", $collage->errstr;
print "Saved $file\n";

# Finish the HTML image map
$html .=<<'HTML';
</map>
</body>
</html>
HTML

$file = $path . 'collage.html';
write_text($file, $html);
print "Saved $file\n";
