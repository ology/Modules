#!/usr/bin/env perl

# Modified from https://metacpan.org/release/CPAN-Dashboard

use strict;
use warnings;

package CPANg::Dashboard;

$CPANg::Dashboard::VERSION = '0.02_01';

use 5.010;
use Moo;
use PAUSE::Packages;
use CPAN::Testers::WWW::Reports::Query::AJAX;
use CPAN::Dashboard::Distribution;
use CPAN::Dashboard::Distribution::CPANTesters;

has author             => ( is => 'ro' );
has distribution_names => ( is => 'ro' );
has distributions      => ( is => 'lazy' );

sub _build_distributions
{
    my $self = shift;
    my $iterator = PAUSE::Packages->new()->release_iterator( well_formed => 1 );
    my %distmap;
    my $dist;

    while ( my $release = $iterator->next_release ) {
        my $distinfo = $release->distinfo;

        next unless ( $self->author && $distinfo->cpanid eq $self->author )
            || ( $self->distribution_names
                && grep { $distinfo->dist eq $_ } @{ $self->distribution_names } );

        $dist = CPAN::Dashboard::Distribution->new(
            name         => $distinfo->dist,
            release_path => $release->path,
            version      => $distinfo->version,
            is_developer => $distinfo->maturity eq 'developer',
            distinfo     => $distinfo,
            modules      => $release->modules,
        );

        $distmap{ $distinfo->dist } = $dist;
    }

    for my $distname (keys %distmap) {
        $dist = $distmap{$distname};

        $dist->bug_count(0);  # XXX Appease the attribute gods

        my $testers = CPAN::Testers::WWW::Reports::Query::AJAX->new(dist => $distname);

        if ( !defined($testers) ) {
            warn "Failed to get CPAN Testers results for dist '$distname'\n";
        }
        else {
            $dist->cpan_testers(
                CPAN::Dashboard::Distribution::CPANTesters->new(
                    passes   => $testers->pass,
                    fails    => $testers->fail,
                    na       => $testers->na,
                    unknowns => $testers->unknown,
                )
            );
        }
    }

    return [ values %distmap ];
}

1;

#####################

use CPANg::Dashboard;

my $author = shift || 'GENE';
 
my $dashboard = CPANg::Dashboard->new( author => $author );

my $i = 0;

my $width = length scalar @{ $dashboard->distributions };

for my $dist ( sort { $a->name cmp $b->name } @{ $dashboard->distributions } ) {
    printf "%0*d. %s: %d / %d / %d / %d\n",
        $width, ++$i, $dist->name,
        $dist->cpan_testers->passes, $dist->cpan_testers->fails,
        $dist->cpan_testers->na, $dist->cpan_testers->unknowns;
}
